如之前所談，針對 後續 Linebot 功能開發
我有先初步寫 封包(資料夾)/模組(檔案)化 大方向架構，程式後續還會再調整
https://drive.google.com/drive/folders/1LkvOp6mh2D4ZuI5T8bHyR8KkvCTt7ipt?usp=drive_link

模組化主要優點如下
每位開發者管理自己的處理函數檔案，易於維護，不影響其他模組。
便於擴展，新增處理函數時，只需在 1. 各自資料夾新增檔案並更新 __init__.py，2. 在import 於 main主程式。

如果大家有興趣開發其他功能，可以去 申請 自己的 Line masseng API & ngrok 帳號
就可以嘗試 改裡面的程式碼，看跑的結果
後續再統一將自己的模組放到 TIR104_G1_Linebot下個人資料夾， 




，嘗試過許多寫法，
目前寫法是可避免@handler.add / LineBotApi/ event.reply_token 被覆蓋
後續我會在微調


如之前所談，針對 Linebot 功能開發

我有先初步寫 封包(資料夾)/模組(檔案)化 大方向架構，
因為 line_bot_api / handler / reply_token 只能在 主程式中被呼叫，嘗試過許多寫法，
目前的寫法是可以import 每個人 line func，再統一由主程式執行
但程式碼很多還要再細改

模組化主要優點如下
每位開發者管理自己的處理函數檔案，易於維護，不影響其他模組。
便於擴展，新增處理函數時，只需在各自資料夾新增檔案並更新 __init__.py，在import 於 main主程式。






清晰劃分職責：保持代碼的模組化，每位開發者管理自己的處理函數檔案，易於維護，不影響其他模組。
便於擴展：新增處理函數時，只需在各自資料夾新增檔案並更新 __init__.py，在import 於 main主程式。
減少衝突：所有處理函數共用單一的 LineBotApi/ handler/ event.reply_token 避免多重實例導致的問題。

，後續大家有空每個人都可以 去
1. 申請 Line masseng API (他會請您創官方帳號) 
2. 申請ngrok 帳號
做了這些後，就可以嘗試改裡面的程式碼，看跑的結果
之後若有開發新功能，我會再統一更新在每一個人的資料夾

